#!/usr/bin/env python3

import argparse
import base64
import os
import re
import sys

try:
    from github import Github
except ImportError as e:
    sys.stderr.write('%s. Run pip install -r requirements.txt\n' % e)
    sys.exit(1)

# The `sys.path.append` is a hack, to work around the fact that this code should really be a package but isn't yet.
sys.path.append(os.path.join(os.path.dirname(__file__), '../src'))
from utils import get_file_git_hash  # isort:skip

# Constants
#

GITHUB_API_TOKEN = os.environ.get('GITHUB_API_TOKEN', None)
if not GITHUB_API_TOKEN:
    print("warning: GITHUB_API_TOKEN is not defined. API calls are rate-limited.", file=sys.stderr)

# Command-line arguments
#

parser = argparse.ArgumentParser(description="Download all the forks of a GitHub repository.")
parser.add_argument("--classroom", action='store_true', help="Repo is a GitHub classroom")
parser.add_argument('-n', "--dry-run", action='store_true', default=False)
parser.add_argument("--limit", type=int, metavar='N', help="download only the first N repos")
parser.add_argument("--match", metavar='SUBSTRING', help="download only repos that contains SUBSTRING")
parser.add_argument("--out", default="downloads", help="Output directory")
parser.add_argument("repo", metavar='REPO_NAME', help="GitHub source repo, in format username/repo_name")
args = parser.parse_args(sys.argv[1:])

# Download repos
#

gh = Github(GITHUB_API_TOKEN)
origin = gh.get_repo(args.repo)
assert origin.owner, "not a GitHub repo: %s" % args.repo
teams = [team for team in gh.get_organization(origin.organization.login).get_teams() if team.name.lower() in TEAM_NAMES]
instructor_logins = {member.login for team in teams for member in team.get_members()}

if args.classroom:
    repos = [r for r in gh.get_user().get_repos() if r.owner == origin.owner and r.name.startswith(origin.name + '-')]
else:
    repos = origin.get_forks()

repos = ([r for r in gh.get_user().get_repos() if r.owner == origin.owner and r.name.startswith(origin.name + '-')]
         if args.classroom else origin.get_forks())

repos = [
    repo for repo in repos
    if repo.owner.login not in instructor_logins and repo_owner_login(repo) not in instructor_logins
]
repos = sorted(repos, key=repo_owner_login)

if args.match:
    repos = [repo for repo in repos if args.match in repo_owner_login(repo)]
if args.limit:
    repos = repos[:args.limit]

origin_file_hashes = {
    item.sha
    for commit in origin.get_commits() for item in origin.get_git_tree(commit.sha, recursive=True).tree
}

for repo in [origin] + repos:
    dirname = ORIGIN_DIRNAME if repo is origin else repo_owner_login(repo)
    download_contents(repo, os.path.join(DOWNLOAD_PATH, dirname), skip_same_as_origin=repo is not origin)
