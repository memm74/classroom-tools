#!/usr/bin/env python3

import argparse
import base64
import os
import re
import sys

try:
    from github import Github
except ImportError as e:
    sys.stderr.write('%s. Run pip install -r requirements.txt\n' % e)
    sys.exit(1)

# The `sys.path.append` is a hack, to work around the fact that this code should really be a package but isn't yet.
sys.path.append(os.path.join(os.path.dirname(__file__), '../src'))
from utils import get_file_git_hash  # isort:skip

# Constants
#

ORIGIN_DIRNAME = 'origin'
TEAM_NAMES = ['instructors', 'faculty', 'ninjas']

GITHUB_API_TOKEN = os.environ.get('GITHUB_API_TOKEN', None)
if not GITHUB_API_TOKEN:
    print(
        "warning: GITHUB_API_TOKEN is not defined. API calls are rate-limited.",
        file=sys.stderr)

# Command-line arguments
#

# Test data for Jupyter / Hydrogen development
if 'ipykernel' in sys.modules:
    sys.argv = ['script', 'sd17spring/ReadingJournal']
    # sys.argv = ['script', '--classroom', 'focs16fall/focs-2016fall-exam-1']

parser = argparse.ArgumentParser(
    description="Download all the forks of a GitHub repository.")
parser.add_argument(
    "--classroom", action='store_true', help="Repo is a GitHub classroom")
parser.add_argument('-n', "--dry-run", action='store_true', default=False)
parser.add_argument(
    "--flatten",
    action='store_true',
    default=False,
    help="Flatten single-file repos")
parser.add_argument("--ignore-images", action='store_true', default=False)
parser.add_argument(
    "--limit", type=int, metavar='N', help="download only the first N repos")
parser.add_argument(
    "--match",
    metavar='SUBSTRING',
    help="download only repos that contains SUBSTRING")
parser.add_argument(
    "repo",
    metavar='REPO_NAME',
    help="GitHub source repo, in format username/repo_name")
args = parser.parse_args(sys.argv[1:])

if args.flatten is None:
    args.flatten = args.classroom
if args.ignore_images is None:
    args.ignore_images = args.classroom

# Download files
#

DOWNLOAD_PATH = os.path.join('downloads', args.repo.replace('/', '-'))


def download_contents(repo, dst_path, skip_same_as_origin=True):
    items = [
        item
        for item in repo.get_git_tree(
            repo.get_commits()[0].sha, recursive=True).tree
        if item.type == 'blob'
    ]
    if skip_same_as_origin:
        items = [item for item in items if item.sha not in origin_file_hashes]

    if args.ignore_images:
        items = [
            item for item in items
            if not re.search(r'\.(gif|jpe?g|png)$', item.path, re.I)
        ]

    flatten = args.flatten and len(items) == 1
    file_destinations = {
        item.path: dst_path + os.path.splitext(item.path)[1]
        if flatten else os.path.join(dst_path, item.path)
        for item in items
    }

    updated_items = [
        item for item in items
        if item.sha != get_file_git_hash(file_destinations[item.path], None)
    ]

    if not items:
        print("%s: no files" % repo_owner_login(repo))
        return

    if not updated_items:
        print("%s: no new files" % repo_owner_login(repo))
        return

    print("%s:" % repo_owner_login(repo))
    for item in updated_items:
        print("  %s" % item.path)
        dst_name = file_destinations[item.path]
        os.makedirs(os.path.dirname(dst_name), exist_ok=True)
        blob = repo.get_git_blob(item.url.split('/')[-1])
        if not args.dry_run:
            with open(dst_name, 'wb') as f:
                f.write(base64.b64decode(blob.content))


def repo_owner_login(repo):
    return repo.name[len(
        origin.name + '-'):] if args.classroom else repo.owner.login


gh = Github(GITHUB_API_TOKEN)
origin = gh.get_repo(args.repo)
assert origin.owner, "not a GitHub repo: %s" % args.repo
teams = [
    team
    for team in gh.get_organization(origin.organization.login).get_teams()
    if team.name.lower() in TEAM_NAMES
]
instructor_logins = {
    member.login
    for team in teams for member in team.get_members()
}

if args.classroom:
    repos = [
        r for r in gh.get_user().get_repos()
        if r.owner == origin.owner and r.name.startswith(origin.name + '-')
    ]
else:
    repos = origin.get_forks()

repos = ([
    r for r in gh.get_user().get_repos()
    if r.owner == origin.owner and r.name.startswith(origin.name + '-')
] if args.classroom else origin.get_forks())

repos = [
    repo for repo in repos
    if repo.owner.login not in instructor_logins and
    repo_owner_login(repo) not in instructor_logins
]
repos = sorted(repos, key=repo_owner_login)

if args.match:
    repos = [repo for repo in repos if args.match in repo_owner_login(repo)]
if args.limit:
    repos = repos[:args.limit]

origin_file_hashes = {
    item.sha
    for commit in origin.get_commits()
    for item in origin.get_git_tree(commit.sha, recursive=True).tree
}

for repo in [origin] + repos:
    dirname = ORIGIN_DIRNAME if repo is origin else repo_owner_login(repo)
    download_contents(
        repo,
        os.path.join(DOWNLOAD_PATH, dirname),
        skip_same_as_origin=repo is not origin)
